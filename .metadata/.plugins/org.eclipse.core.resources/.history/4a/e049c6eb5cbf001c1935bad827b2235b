package datastr;

public class heapify_algo {
	
//       public static void heapify(int arr[],int n,int i) {
//    	   int largest=i;
//    	   int left=2*i;
//    	   int right=2*i+1;
//    	   
//    	   
//    	   if(left<=n && arr[left]>arr[largest]) {
//    		   largest=left;
//    	   }
//    	   
//    	   if(right<=n && arr[right]>arr[largest]) {
//    		   largest=right;
//    	   }
//    	   if(largest!=i) {
//    		   int temp=arr[i];
//    			arr[i]=arr[largest];
//    			arr[largest]=temp;
//    		   heapify(arr,n,largest);
//    	   }
//       }
       
       static void heapify(int arr[], int n, int i)
       {
           int largest = i;  // Initialize largest as root
           int l = 2*i + 1;  // left = 2*i + 1
           int r = 2*i + 2;  // right = 2*i + 2
     
           // If left child is larger than root
           if (l < n && arr[l] > arr[largest])
               largest = l;
     
           // If right child is larger than largest so far
           if (r < n && arr[r] > arr[largest])
               largest = r;
     
           // If largest is not root
           if (largest != i)
           {
               int swap = arr[i];
               arr[i] = arr[largest];
               arr[largest] = swap;
     
               // Recursively heapify the affected sub-tree
               heapify(arr, n, largest);
           }
       }
       public static void buildheap(int arr[],int n) {
    	   for(int i=(n/2)-1;i>=0;i--) {
    		   heapify(arr, n, i);
    	   }
       }
       static void printHeap(int arr[], int n) 
       { 
         System.out.println("Array representation of Heap:"); 
         for (int i = 0; i <= n; i++) 
         System.out.print(arr[i] + " "); 
         System.out.println(); 
       } 
       
	public static void main(String[] args) {
		// TODO Auto-generated method stub
        int arr[]= {1,2,3,4,5};
        int n=arr.length-1;
        int i=0;
        heapify(arr, n, i);
        buildheap(arr, n);
        printHeap(arr, n);
	}

}
