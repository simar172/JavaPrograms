package datastr;

import java.util.LinkedList;

import datastr.LL.Node;

//import dsaques.RemoveNthNodeFromEndofList.ListNode;

public class Floydalgoofdetectingloops {
	static ListNode head;
	public class ListNode {
	      int val;
	      ListNode next;
	      ListNode() {
	    	  
	      }
	      ListNode(int val){
	       this.val = val;
	      }
	      ListNode(int val, ListNode next) { 
	    	  this.val = val; 
	    	  this.next = next; 
	    	  }
	  }
	public void addFirst(int data) {
   	 ListNode newnode=new ListNode(data);
   	 if(head==null) {
   		 head=newnode;
   		 return;
   	 }
   	 newnode.next=head;
   	 head=newnode;
    }
	public boolean hasCycle(ListNode head) {
		ListNode slow = head;
		ListNode fast = head;
		while(fast != null && fast.next != null) {
		slow = slow.next;
		fast = fast.next.next;
		if(fast == slow) {
		return true;
		}
		}
		return false;
}
	public static void main(String[] args) {
		Floydalgoofdetectingloops a1=new Floydalgoofdetectingloops();
		 a1.addFirst(1);
		 a1.addFirst(2);
		 a1.addFirst(3);
		 a1.addFirst(4);
		 a1.addFirst(5);
		System.out.println(a1.hasCycle(head));
	}
}
